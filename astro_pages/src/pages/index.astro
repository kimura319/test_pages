---
import Layout from '../layouts/Layout.astro';
import TextBox from '../components/textbox.astro';

---

<Layout>
	<div class="demo-container">
		<h2>pagesのデモ</h2>
		
		<TextBox 
			label="お名前" 
			placeholder="山田太郎" 
			type = "text"
			id="name" 
			name="name" 
			required={true}
		/>

		<TextBox 
			label="数値" 
			placeholder="12345" 
			type = "number"
			id="num" 
			name="num" 
			required={true}
		/>

		<div class="button-container">
			<button id="confirmButton" class="confirm-button" disabled>
				決定
			</button>
			<button id="fetch_contents_button" class="fetch-contents-button">
				コンテンツ取得
			</button>
			<button id="fetch_releases_button" class="fetch-releases-button">
				最新のリリース取得
			</button>
		</div>

		<a id="download"></a>ダウンロード

		<div id="resultMessage" class="result-message" style="display: none;">
			<p>こんにちは、<span id="display_name"></span>さん！</p>
			<p>今日のラッキーナンバーは<span id="display_number"></span>さん！</p>
		</div>

		<div id="statusMessage" class="status-message" style="display: none;">
			<p id="statusText"></p>
		</div>

		<pre id="fileContent" class="file-content"></pre>

	</div>
</Layout>

<style>
	.demo-container {
		max-width: 600px;
		margin: 150px auto;
		padding: 0 20px;
	}

	.demo-container h2 {
		color: #2A233E;
		font-size: 24px;
		font-weight: bold;
		margin-bottom: 30px;
		text-align: center;
	}

	.button-container {
		display: flex;
		justify-content: center;
		gap: 30px;
		margin-top: 20px;
		margin-bottom: 20px;
	}

	.confirm-button {
		padding: 12px 24px;
		background-color: #FF7E33;
		color: white;
		border: none;
		border-radius: 8px;
		font-size: 16px;
		font-weight: bold;
		cursor: pointer;
		transition: background-color 0.3s ease;
		min-width: 120px;
	}

	.confirm-button:hover:not(:disabled) {
		background-color: #e6691a;
	}

	.confirm-button:disabled {
		background-color: #9ca3af;
		cursor: not-allowed;
	}

	.fetch-contents-button {
		padding: 12px 24px;
		background-color: #FF7E33;
		color: white;
		border: none;
		border-radius: 8px;
		font-size: 16px;
		font-weight: bold;
		cursor: pointer;
		transition: background-color 0.3s ease;
		min-width: 120px;
	}

	.fetch-releases-button {
		padding: 12px 24px;
		background-color: #8e6eff;
		color: white;
		border: none;
		border-radius: 8px;
		font-size: 16px;
		font-weight: bold;
		cursor: pointer;
		transition: background-color 0.3s ease;
		min-width: 120px;
	}

	.result-message {
		text-align: center;
		padding: 15px;
		background-color: #f0f9ff;
		border: 2px solid #0ea5e9;
		border-radius: 8px;
		margin-top: 20px;
	}

	.result-message p {
		margin: 0;
		color: #0c4a6e;
		font-size: 18px;
		font-weight: bold;
	}

	.result-message span {
		color: #FF7E33;
	}

	.status-message {
		text-align: center;
		padding: 15px;
		border-radius: 8px;
		margin-top: 10px;
	}

	.status-message.success {
		background-color: #f0fdf4;
		border: 2px solid #22c55e;
		color: #15803d;
	}

	.status-message.error {
		background-color: #fef2f2;
		border: 2px solid #ef4444;
		color: #dc2626;
	}

	.status-message.loading {
		background-color: #fefce8;
		border: 2px solid #eab308;
		color: #a16207;
	}

	.status-message p {
		margin: 0;
		font-weight: bold;
	}

</style>

<script>
	import { Octokit } from "@octokit/rest";

	// GitHub Actionsに送信する関数
	async function sendToGitHubActions(username: string, number: string): Promise<void> {
		const owner = 'kimura319';  // GitHubユーザー名
		const repo = 'test_pages';  // リポジトリ名
		
		// デモ用の設定（実際のトークンは入力してください）
		const token = prompt('GitHub Personal Access Tokenを入力してください:');
		
		if (!token) {
			throw new Error('GitHub tokenが設定されていません');
		}

		// Repository Dispatch APIエンドポイント
		const url = `https://api.github.com/repos/${owner}/${repo}/actions/workflows/cpp.yaml/dispatches`;

		const response = await fetch(url, {
			method: 'POST',
			headers: {
				'Accept': 'application/vnd.github+json',
				'Authorization': `Bearer ${token}`,
				'X-GitHub-Api-Version': '2022-11-28'
			},
			body: JSON.stringify({
				ref: 'main',
				inputs: {
					name: username,
					number: number
				}
			})
		});

		if (!response.ok) {
			// レスポンス詳細も取得
			let errorDetail = '';
			try {
				errorDetail = await response.text();
			} catch {}
			throw new Error(`GitHub API Error: ${response.status} ${response.statusText}\n${errorDetail}`);
		}
	}

	// DOMが読み込まれた後に実行
	document.addEventListener('DOMContentLoaded', function() {
		const nameInput = document.getElementById('name') as HTMLInputElement;
		const numberInput = document.getElementById('num') as HTMLInputElement;
		const confirmButton = document.getElementById('confirmButton') as HTMLButtonElement;
		const fetch_contents_button = document.getElementById('fetch_contents_button') as HTMLButtonElement;
		const fetch_releases_button = document.getElementById('fetch_releases_button') as HTMLButtonElement;

		const resultMessage = document.getElementById('resultMessage') as HTMLElement;
		const display_name = document.getElementById('display_name') as HTMLElement;
		const display_number = document.getElementById('display_number') as HTMLElement;
		const statusMessage = document.getElementById('statusMessage') as HTMLElement;
		const statusText = document.getElementById('statusText') as HTMLElement;
		const file_content = document.getElementById('fileContent') as HTMLElement;

		const a = document.getElementById('download') as HTMLAnchorElement;

		if (!nameInput || !confirmButton || !resultMessage || !display_name || !display_number || !statusMessage || !statusText) {
			console.error('Required elements not found');
			return;
		}

		// 名前入力フィールドの変更を監視
		nameInput.addEventListener('input', function() {
			const name = this.value.trim();
			// 名前が入力されている場合はボタンを有効化、そうでなければ無効化
			confirmButton.disabled = name.length === 0;
		});
		numberInput.addEventListener('input', function() {
			const num = this.value.trim();
			// 名前が入力されている場合はボタンを有効化、そうでなければ無効化
			confirmButton.disabled = num.length === 0;
		});

		// githubのレポジトリからファイルを取得
		fetch_contents_button.addEventListener('click', async function() {
			const owner = 'kimura319';
			const repo = 'test_pages';
			const path = 'src/hello.cpp'; // 取得したいファイルパス
			const url = `https://api.github.com/repos/${owner}/${repo}/contents/${path}`;
			
			const response = await fetch(url);
			if (!response.ok) {
				file_content.textContent = '取得失敗: ' + response.statusText;
				return;
			}
			const data = await response.json();
			// base64デコード
			const content = atob(data.content.replace(/\n/g, ''));
			// 正規表現によって、複数の "hello" を 「こんにちわ」に置換
			file_content.textContent = content.replace(/hello/g, 'こんにちは');
		});

		// githubの最新リリースからファイルを取得
		fetch_releases_button.addEventListener('click', async function() {
			// Octokit.js
			// https://github.com/octokit/core.js#readme
			const octokit = new Octokit();
			// const owner = 'kimura319';
			// const repo = 'test_pages';
			// const releases_url = `https://api.github.com/repos/${owner}/${repo}/releases/latest`;
			// const releases_url = `https://api.github.com/repos/${owner}/${repo}/releases/assets/284627415`;

			// const response = await fetch(releases_url);
			// if (!response.ok) {
			// 	file_content.textContent = '取得失敗: ' + response.statusText;
			// 	return;
			// }
			// const release = await response.json();

			// file_content.textContent = release.browser_download_url;
			// const download_url = await fetch(release.browser_download_url);
			
			await octokit.request('GET /repos/{owner}/{repo}/releases/assets/{asset_id}', {
				owner: 'kimura319',
				repo: 'test_pages',
				asset_id: 284627415,
				headers: {
					'X-GitHub-Api-Version': '2022-11-28'
				}
			})

		

			// レスポンスをそのまま表示
			// file_content.textContent = JSON.stringify(release, null, 2);

			// release内のassetsの中から、name が hello.exe と一致するアセットを探す
    		// const exeAsset = release.assets.find((asset: any) => asset.name === 'hello.exe');
			// if (exeAsset) {
			// 	// バイナリをダウンロード
			// 	const binaryResponse = await fetch(exeAsset.browser_download_url);
			// 	// file_content.textContent = exeAsset.browser_download_url;

			// 	const blob = await binaryResponse.blob();
				
			// 	// ファイルとして保存
			// 	const url = URL.createObjectURL(blob);
			// 	a.href = url;
			// 	a.download = 'hello.exe';
			// 	a.click();
    		// }
		});
		// 決定ボタンのクリックイベント
		confirmButton.addEventListener('click', async function() {
			const name = nameInput.value.trim();
			const num = numberInput.value.trim();
			if (name && num) {
				// ボタンを無効化
				confirmButton.disabled = true;
				confirmButton.textContent = '送信中...';

				// resultMessageの表示
				resultMessage.style.display = 'block';
				resultMessage.className = 'result-message';
				display_name.textContent = name;
				display_number.textContent = num;

				// ステータスメッセージを表示
				statusMessage.style.display = 'block';
				statusMessage.className = 'status-message loading';
				statusText.textContent = 'GitHub Actionsに送信しています...';
			}

			try {
				// GitHub Actionsに送信
				await sendToGitHubActions(name, num);    
				statusMessage.className = 'status-message success';
				statusText.textContent = 'GitHub Actionsに正常に送信されました！Actionsタブでワークフローをご確認ください。';

			} catch (error) {
				console.error('送信エラー:', error);
				let errorMessage = '不明なエラーが発生しました';
				if (error instanceof Error) {
					errorMessage = error.message;
				} else if (typeof error === 'string') {
					errorMessage = error;
				}

				statusMessage.className = 'status-message error';
				statusText.textContent = `送信に失敗しました: ${errorMessage}`;
			} finally {
				// 入力フィールドをクリア
				nameInput.value = '';
				numberInput.value = '';
                
				// ボタンを有効化
				confirmButton.textContent = '決定';
			}
		});

		// Enterキーでも決定できるようにする
		nameInput.addEventListener('keypress', function(event) {
			if (event.key === 'Enter' && !confirmButton.disabled) {
				confirmButton.click();
			}
		});
	});
</script>

