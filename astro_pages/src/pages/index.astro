---
import Layout from '../layouts/Layout.astro';
import TextBox from '../components/textbox.astro';
import SerialApi from '../components/serial_api.astro';
---

<Layout>
	<section class="form-section">
		<div id="title_wrapper" class="title-wrapper">
            <span id="title" class="title" aria-live="polite">Teams</span>
        </div>
		<form class="form-card">
			<TextBox 
				label="SSID" 
				placeholder="your ssid here" 
				type="text"
				id="ssid_input" 
				name="ssid_input" 
				maxlength={32}
				required={true}
			/>
			<TextBox 
				label="パスワード" 
				placeholder="your password here" 
				type="password"
				id="password_input" 
				name="password_input" 
				maxlength={64}
				required={true}
			/>
			<div id="url_wrapper" class="url-wrapper">
				<TextBox 
					label="Webhook URL" 
					placeholder="https://example.com/webhook" 
					type="url"
					id="url_input" 
					name="url_input" 
					pattern="https://.*"
					maxlength={300}
					required={true}
				/>
				<span id="url_error" class="error">
					URLはhttps://から始まる必要があります
				</span>
			</div>

			<div id="token_wrapper" class="token-wrapper" style="display:none;">
				<TextBox 
					label="Access Token" 
					placeholder="your token here" 
					type="text"
					id="token" 
					name="token" 
					maxlength={64}
					required={true}
				/>
			</div>
			<SerialApi />
		</form>
	</section>
</Layout>

<style>
	.form-section {
		width: 100%;
		max-width: 480px;
		margin: 40px auto;
		padding: 0 12px;
	}
	.form-card {
		background: #fff;
		border-radius: 12px;
		box-shadow: 0 2px 12px rgba(0,0,0,0.06);
		padding: 32px 24px 24px 24px;
		display: flex;
		flex-direction: column;
		gap: 25px;
	}
	.error {
		color: #ef2222;
		font-size: 14px;
		margin-bottom: 8px;
		display: none;
	}
	.title-wrapper {
        width: 100%;
        text-align: center;
        margin-bottom: 16px;
    }
    .title {
        font-size: 1.4rem;
        font-weight: 700;
        color: #8e6eff;
        font-family: 'Noto Sans', 'Arial', sans-serif;
        letter-spacing: 1px;
    }

    .form-card label,
    .form-card input,
    .form-card .textbox-label,
    .form-card .textbox-input {
        font-family: 'Noto Sans', 'Arial', sans-serif;
        font-size: 16px;
        line-height: 1.6;
        letter-spacing: 0.03em;
        font-feature-settings: "palt";
    }
</style>

<script>
	// DOMが読み込まれた後に実行
	document.addEventListener('DOMContentLoaded', function() {
		// 入力
		const ssid_input = document.getElementById('ssid_input') as HTMLInputElement;
		const pass_input = document.getElementById('password_input') as HTMLInputElement;
		const url_input = document.getElementById('url_input') as HTMLInputElement;
		// 書き込みボタン
		const flash_button = document.getElementById('flash_button') as HTMLButtonElement;
		const url_error = document.getElementById('url_error') as HTMLElement;
		// シリアル接続ボタン
		const connect_button = document.getElementById('connect_button') as HTMLButtonElement;

		// 必須要素のチェック
		if (!ssid_input || !pass_input || !url_input || !flash_button) {
			console.error('Required elements not found');
			return;
		}

		// 名前入力フィールドの変更を監視
		ssid_input.addEventListener('input', update_button_state);
		pass_input.addEventListener('input', update_button_state);
		url_input.addEventListener('input', update_button_state);

		// 全入力値が存在し、urlが適切な場合のみ、ボタンを有効化
        function update_button_state() {
            const ssid = ssid_input.value.trim();
			const pass = pass_input.value.trim();
			const url = url_input.value.trim();

			const isUrlValid = /^https:\/\/.+/.test(url);
            const enabled = ssid.length > 0 && pass.length > 0 && url.length > 0 && isUrlValid;
            flash_button.disabled = !enabled;
        }
		update_button_state(); // 初期状態の更新

		// urlの入力のバリデーション
		function handle_url_input_event(event: any) {
			const val = url_input.value.trim();
		    const isValid = /^https:\/\/.+/.test(val) || val.length === 0;

			if (event.type === 'blur' && !isValid) {
				// focusが外れた際、「https://」が無い場合はエラー表示
			    url_error.style.display = 'inline';
			    url_input.style.borderColor = '#ef2222';
				url_input.style.backgroundColor = '#efbbbb';
			} else if (event.type === 'input' && isValid) {
				// 入力に「https://」がある場合は通常表示
				url_error.style.display = 'none';
				url_input.style.borderColor = '';
				url_input.style.backgroundColor = '';
			} else {
				// それ以外のケースでは何もしない
				return;
			}
			update_button_state();
		};

		url_input.addEventListener('blur', handle_url_input_event);
		url_input.addEventListener('input', handle_url_input_event);

		// Enterキーで次のフォーム入力
		ssid_input.addEventListener('keypress', function(event) {
			if (event.key === 'Enter') {
				pass_input.focus();
			}
		});
	
		// Enterキーで次のフォーム入力
		pass_input.addEventListener('keypress', function(event) {
			if (event.key === 'Enter') {
				url_input.focus();
			}
		});

		// Enterキーで接続ボタンの動作
		url_input.addEventListener('keypress', function(event) {
			if (event.key === 'Enter' && !connect_button.disabled) {
				connect_button.click();
			}
		});
	});
</script>

