---
import Layout from '../layouts/Layout.astro';
import TextBox from '../components/textbox.astro';
import SerialApi from '../components/serial_api.astro';
---

<Layout>
	<div class="demo-container">
		<h2>pagesのデモ</h2>
		
		<TextBox 
			label="SSID" 
			placeholder="ssid_example" 
			type="text"
			id="ssid" 
			name="ssid" 
			maxlength={32}
			required={true}
		/>

		<TextBox 
			label="パスワード" 
			placeholder="absd12345" 
			type="password"
			id="pass" 
			name="pass" 
			maxlength={64}
			required={true}
		/>

		<TextBox 
			label="webhook URL" 
			placeholder="https://example.com/webhook" 
			type="url"
			id="input_url" 
			name="input_url" 
			pattern="https://.*"
			maxlength={300}
			required={true}
		/>
		<span id="url_error" style="color:#ef2222; display:none; font-size:14px;">
    		URLはhttps://から始まる必要があります
		</span>

		<div class="button-container">
			<button id="binary_modify_button" class="binary-modify-button" disabled>
				バイナリ加工
			</button>
		</div>

		<div id="resultMessage" class="result-message" style="display: none;">
			<p id="result_text"></p>
		</div>

		<div id="statusMessage" class="status-message" style="display: none;">
			<p id="statusText"></p>
		</div>
	</div>

	<SerialApi />
</Layout>

<style>
	.demo-container {
		max-width: 600px;
		margin: 150px auto;
		padding: 0 20px;
	}

	.demo-container h2 {
		color: #2A233E;
		font-size: 24px;
		font-weight: bold;
		margin-bottom: 30px;
		text-align: center;
	}

	.button-container {
		display: flex;
		justify-content: center;
		gap: 30px;
		margin-top: 20px;
		margin-bottom: 20px;
	}

	.binary-download-button {
		padding: 12px 24px;
		background-color: #66cc73;
		color: white;
		border: none;
		border-radius: 8px;
		font-size: 16px;
		font-weight: bold;
		cursor: pointer;
		transition: background-color 0.3s ease;
		min-width: 120px;
	}

	.binary-modify-button {
		padding: 12px 24px;
		background-color: #8e6eff;
		color: white;
		border: none;
		border-radius: 8px;
		font-size: 16px;
		font-weight: bold;
		cursor: pointer;
		transition: background-color 0.3s ease;
		min-width: 120px;
	}

	.binary-modify-button:disabled {
		background-color: #9ca3af;
		cursor: not-allowed;
	}
	.result-message {
		text-align: center;
		padding: 15px;
		background-color: #f0f9ff;
		border: 2px solid #0ea5e9;
		border-radius: 8px;
		margin-top: 20px;
	}

	.result-message p {
		margin: 0;
		color: #0c4a6e;
		font-size: 18px;
		font-weight: bold;
	}

	.result-message span {
		color: #FF7E33;
	}

	.status-message {
		text-align: center;
		padding: 15px;
		border-radius: 8px;
		margin-top: 10px;
	}

	.status-message.success {
		background-color: #f0fdf4;
		border: 2px solid #22c55e;
		color: #15803d;
	}

	.status-message.error {
		background-color: #fef2f2;
		border: 2px solid #ef4444;
		color: #dc2626;
	}

	.status-message.loading {
		background-color: #fefce8;
		border: 2px solid #eab308;
		color: #a16207;
	}

	.status-message p {
		margin: 0;
		font-weight: bold;
	}

</style>

<script>
	// DOMが読み込まれた後に実行
	document.addEventListener('DOMContentLoaded', function() {
		const ssid_input = document.getElementById('ssid') as HTMLInputElement;
		const pass_input = document.getElementById('pass') as HTMLInputElement;
		const url_input = document.getElementById('input_url') as HTMLInputElement;
		const binary_modify_button = document.getElementById('binary_modify_button') as HTMLButtonElement;
		const resultMessage = document.getElementById('resultMessage') as HTMLElement;
		const result_text = document.getElementById('result_text') as HTMLElement;
		const url_error = document.getElementById('url_error') as HTMLElement;

		const connectButton = document.getElementById('connectButton') as HTMLButtonElement;
		const disconnectButton = document.getElementById('disconnectButton') as HTMLButtonElement;
		const statusElement = document.getElementById('status') as HTMLSpanElement;

		// Web Serial API ============================================
		let port: SerialPort | null = null;
		let writer: WritableStreamDefaultWriter | null = null;

		// シリアル接続
		connectButton?.addEventListener('click', async () => {
			try {
				// シリアルポートの選択
				port = await (navigator as any).serial.requestPort();
				
				// ポートを開く（ボーレート等の設定）
				await port.open({ 
					baudRate: 115200,
					dataBits: 8,
					stopBits: 1,
					parity: 'none'
				});

				if (!writer && port) {
					writer = port.writable.getWriter();
				}

				if (statusElement) {
					statusElement.textContent = '接続済み';
					statusElement.style.color = '#34d399';
				}
				if (connectButton) connectButton.disabled = true;
				if (disconnectButton) disconnectButton.disabled = false;

			} catch (error) {
				console.error('接続エラー:', error);
			}
		});

		// シリアル切断
		disconnectButton?.addEventListener('click', async () => {
			try {
				if (port) {
					await port.close();
				}
				
				port = null;
				writer = null;

				if (statusElement) {
					statusElement.textContent = '未接続';
					statusElement.style.color = '#6b7280';
				}
				if (connectButton) connectButton.disabled = false;
				if (disconnectButton) disconnectButton.disabled = true;

			} catch (error) {
				console.error('切断エラー:', error);
			}
		});

		// Web Serial API の対応チェック
		if (!('serial' in navigator)) {
			if (statusElement) {
				statusElement.textContent = 'Web Serial API未対応';
				statusElement.style.color = '#f87171';
			}
			if (connectButton) connectButton.disabled = true;
		}
		// =============================================================

		if (!ssid_input || !pass_input || !url_input || !binary_modify_button || !resultMessage || !result_text) {
			console.error('Required elements not found');
			return;
		}

		// 名前入力フィールドの変更を監視
		ssid_input.addEventListener('input', updateButtonState);
		pass_input.addEventListener('input', updateButtonState);
		url_input.addEventListener('input', updateButtonState);

		// 入力値の両方がある場合のみボタンを有効化
        function updateButtonState() {
            const user_ssid = ssid_input.value.trim();
			const user_pass = pass_input.value.trim();
			const user_url = url_input.value.trim();
			const isUrlValid = /^https:\/\/.+/.test(user_url);
            const enabled = user_ssid.length > 0 && user_pass.length > 0 && user_url.length > 0 && isUrlValid;
            binary_modify_button.disabled = !enabled;
        }

		// 結果メッセージを表示
		function display_result_message() {
			resultMessage.style.display = 'block';
			resultMessage.className = 'result-message';
			result_text.textContent = '入力完了！';
        }

		// ファイルをダウンロード
		function click_download(url: string) {
			const a = document.createElement('a');
			document.body.appendChild(a); // Firefox対応
			a.href = url;
			a.download = 'firmware.bin'; // ダウンロードするファイル名
			a.click(); // 自動的にダウンロードを開始
        }

		// バイナリファイルを加工
		function modify_binary(bytes: Uint8Array, keyword: string, replace_len: number, name: string) {
			const keyword_bytes = Array.from(keyword).map(b => b.charCodeAt(0));
			for (let byte_cnt = 0; byte_cnt < bytes.length - replace_len ; byte_cnt++) {
				if (keyword_bytes.every((char_byte, index) => bytes[byte_cnt + index] === char_byte)) {
					for (let i = 0; i < replace_len; i++) {
						if (name.length <= i) {
							bytes[byte_cnt + i] = 0; // 名前が短い場合は0で埋める
						}
						bytes[byte_cnt + i] = name.charCodeAt(i);
					}
					break; // 最初の一致のみ処理
				}
			}
		}

		// url の入力のバリデーション
		function handleUrlInputEvent(event: any) {
			const val = url_input.value.trim();
		    const isValid = /^https:\/\/.+/.test(val) || val.length === 0;

			if (event.type === 'blur' && !isValid) {
				// focusが外れた際、「https://」が無い場合はエラー表示
			    url_error.style.display = 'inline';
			    url_input.style.borderColor = '#ef2222';
				url_input.style.backgroundColor = '#efbbbb';
			} else if (event.type === 'input' && isValid) {
				// 入力に「https://」がある場合は通常表示
				url_error.style.display = 'none';
				url_input.style.borderColor = '';
				url_input.style.backgroundColor = '';
			} else {
				// それ以外のケースでは何もしない
				return;
			}
			updateButtonState();
		};

		url_input.addEventListener('blur', handleUrlInputEvent);
		url_input.addEventListener('input', handleUrlInputEvent);

		// バイナリ加工ボタンのクリックイベント
		binary_modify_button.addEventListener('click', async function() {
			const user_ssid = ssid_input.value.trim();
			const user_pass = pass_input.value.trim();
			const user_url = url_input.value.trim();

			if(user_ssid && user_pass && user_url) {
				display_result_message();	// resultMessageの表示
			}

			try {
				// 加工するバイナリファイル
				const bainary_file = await fetch('/test_pages/firmware.bin');
				const arrayBuffer = await bainary_file.arrayBuffer();
				const bytes = new Uint8Array(arrayBuffer);

				// バイナリファイルを加工
				modify_binary(bytes, 'FiBS_temporary_ssid_2025', 33, user_ssid);
				modify_binary(bytes, 'FiBS_temporary_password_2025', 64, user_pass);
				modify_binary(bytes, 'FiBS_temporary_url_2025', 300, user_url);

				// MIMEタイプを指定し、bytesからBlobを作成
				const blob = new Blob([bytes], { type: 'application/octet-stream' });
				const url = URL.createObjectURL(blob);

				click_download(url);
				URL.revokeObjectURL(url);

				// シリアル通信でバイナリ送信
				if (!writer) {
					alert('シリアル接続されていません。先に「シリアル接続」ボタンを押してください。');
					return;
				}
				await writer.write(new Uint8Array(arrayBuffer));
            	alert('バイナリ送信完了');
			} catch (e) {
        	result_text.textContent = 'バイナリ取得失敗: ' + e;
			} 
		});

		// Enterキーで次のフォーム入力
		ssid_input.addEventListener('keypress', function(event) {
			if (event.key === 'Enter') {
				pass_input.focus();
			}
		});
		
		pass_input.addEventListener('keypress', function(event) {
			if (event.key === 'Enter') {
				url_input.focus();
			}
		});

		// Enterキーでも決定できるようにする
		url_input.addEventListener('keypress', function(event) {
			if (event.key === 'Enter' && !binary_modify_button.disabled) {
				binary_modify_button.click();
			}
		});
	});
</script>

