<div class="message_console">    
    <div class="serial-data">
        <h3>送信データ</h3>
        <div class="data-controls">
            <input type="text" id="sendData" placeholder="送信するデータを入力" class="data-input" />
            <button id="sendButton" class="serial-button">送信</button>
        </div>
    </div>

    <div class="serial-log">
        <h3>受信ログ</h3>
        <div id="receivedData" class="log-area"></div>
        <button id="clearLog" class="serial-button">ログクリア</button>
    </div>
</div>

<style>
    .message_console {
        max-width: 800px;
        min-width: 300px;
        margin: 20px auto;
        padding: 20px;
        border: 2px solid #e1e5e9;
        border-radius: 12px;
        background-color: #ffffff;
    }

    .message_console h3 {
        color: #2A233E;
        font-size: 18px;
        font-weight: bold;
        margin: 20px 0 10px 0;
    }

    .data-controls {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
    }

    .data-input {
        flex: 1;
        padding: 10px;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        font-size: 16px;
    }

    .log-area {
        width: 100%;
        height: 200px;
        padding: 10px;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        background-color: #f9f9f9;
        overflow-y: auto;
        white-space: pre-wrap;
        word-wrap: break-word;
        margin-bottom: 10px;
    }

    .serial-button {
        padding: 10px 20px;
        background-color: #FF7E33;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 16px;
        font-weight: bold;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .serial-button:hover:not(:disabled) {
        background-color: #e6691a;
    }
</style>

<script>
    const sendButton = document.getElementById('sendButton') as HTMLButtonElement;
    const sendDataInput = document.getElementById('sendData') as HTMLInputElement;
    const receivedDataElement = document.getElementById('receivedData') as HTMLDivElement;
    const clearLogButton = document.getElementById('clearLog') as HTMLButtonElement;

    let port: SerialPort | null = null;
    let writer: WritableStreamDefaultWriter | null = null;
    let reader: ReadableStreamDefaultReader | null = null;

    // データ送信
    sendButton?.addEventListener('click', async () => {
        const data = sendDataInput?.value;
        if (!data) return;

        try {
            if (!writer && port) {
                writer = port.writable.getWriter();
            }

            if (writer) {
                const encoder = new TextEncoder();
                await writer.write(encoder.encode(data + '\n'));
                
                addLogEntry(`送信: ${data}`, 'sent');
                if (sendDataInput) sendDataInput.value = '';
            }

        } catch (error) {
            console.error('送信エラー:', error);
            addLogEntry(`送信エラー: ${error instanceof Error ? error.message : String(error)}`, 'error');
        } finally {
            if (writer) {
                writer.releaseLock();
                writer = null;
            }
        }
    });

    // Enterキーで送信
    sendDataInput?.addEventListener('keypress', (event) => {
        if (event.key === 'Enter' && sendButton && !sendButton.disabled) {
            sendButton.click();
        }
    });

    // ログエントリーの追加
    function addLogEntry(message: string, type: string = 'info') {
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = document.createElement('div');
        logEntry.className = `log-entry ${type}`;
        logEntry.textContent = `[${timestamp}] ${message}`;
        
        if (receivedDataElement) {
            receivedDataElement.appendChild(logEntry);
            receivedDataElement.scrollTop = receivedDataElement.scrollHeight;
        }
    }

    // ログクリア
    clearLogButton?.addEventListener('click', () => {
        if (receivedDataElement) {
            receivedDataElement.innerHTML = '';
        }
        addLogEntry('ログをクリアしました', 'info');
    });
</script>
